## Generating Boolean matrices as nested lists of True / False values and multipying them.

from random import randint

def bitor(a,b):
    """runs the or operation on two bitstrings component-wise"""
    sum = []
    if len(a) != len(b):
       return 'Error'
    else:
       for i in range(len(a)): ## we already checked len(a) = len(b) so we can use either as the upper bound for indexing variable
           j = a[i] or b[i]
           sum.append(j)
    return sum

def bitand(a,b):
    """run the and operation on two bitstrings component-wise"""
    product = []
    if len(a) != len(b):
       return 'Error'
    else:
       for i in range(len(a)): 
           j = a[i] and b[i]
           product.append(j)
    return product

def randstring(k)
    """to define random matrices we need to get random bitstrings, which are the elements of the matrices"""
    string = []
    for i in range(k):
        m = randint(0,1) ##source of randomness, run each time on iteration for fresh randomness i.e. each element of bitstring independently distributed
                         ##this is giving us true / false with p = 1/2; might be possible to modify this as dicussed in paper
        if m == 0:
           string.append(False)
        if m == 1:
           string.append(True)
      return string  

def rand_bool_mat(n,k): 
    """generate a random n x n matrix over bitstrings length k, intepreted as nested lists of Boolean values"""
    matrix = []
    for i in range(n):
        matrix.append([]) ##initialise the matrix with n empty rows
        for j in range(n):
            matrix[i].append(rand_string(k)) ##in each empty row add n random bitstrings length k
     return matrix       

def bitdots(a,b):
    """to define matrix multiplication it is useful to have a notion of the dot product (note a matrix product element is effectively a row dot product a column); here 
       define a dot product w.r.t bitor, bitand"""
    d = bitand(a[0],b[0])  ##initial value of d for iteration
    for i in range(len(a)-1): ##up to len(a)-1 due to i+1 counter
        d = bitor(d, bitand(a[i+1],b[i+1]))
    return d
    
def col_mat(a,k):    
    """return the k th column of matrix a (note that because of how we set matrices up we can extract the ith row of a just with a[i]""""
    col = []
    for i in range(len(a)):
        col.append(a[i][k]) ##appends our list with kth entry of every row, which is exactly the kth column
    return col
    
def prod_bool_mat(a,b)
    """product of two matrices w.r.t and, or operations on bitstrings"""
    prod = []
    for i in range(len(a)):
        prod.append([]) ##intialise rows of product matrix
        for j in range(len(a)):
            prod[i].append(bitdots(a[i],col_mat(b,j))## jth element of row i is ith row of a . jth column of b
     return prod       
    
def generate_permutation(size):
    """
    Input should be SET_SIZE
    Special cases are 2 and 3, where a random shuffling of integers
    are used as the permutation.
    Else loop works as follows:
        - Finds primes uses Sieve of Eratosthenes until sum of generated
          primes (subcycle_length) exceeds size.
        - Removes last number if subcycle_length is bigger than size.
        - Uses subcycle_length to pull permutations out of the shuffled
          list of integers.
    """
    
    shuffled_nums = [(i + 1) for i in range(size)]
    shuffle(shuffled_nums)
    
    if (size == 2 or size == 3):
        return Permutation.cycle(*shuffled_nums)
    else:
        bool_vals = [True for i in range(2, size)]
        subcycle_lengths = []
        
        j = 0
        while(sum(subcycle_lengths) < size and j < size - 2):
            if (bool_vals[j] == True):
                cur_val = 2
                while ((j + 2) * cur_val < size):
                    bool_vals[((j + 2) * cur_val) - 2] = False
                    cur_val += 1
                subcycle_lengths.append(j + 2)
            j += 1
        
        if (sum(subcycle_lengths) > size):
            subcycle_lengths.pop()
        
        perm = Permutation.cycle()
        start = 0
        for num in subcycle_lengths:
            perm *= Permutation.cycle(*shuffled_nums[start:start + num])
            start += num
            
        return perm

## for p some permutation resulting from generate_permutation

def permute_list(a):
    b = []
    for i in range(len(a)):
        b.append(a[p(i+1)-1]) ## have to adjust indices
    return b
    
def h(a):
    b = []
    for i in range(len(a)):
        b.append([])
        for j in range(len(a)):
            b[i].append(permute_list(a[i][j])
    return b
    

       
def convert_string(i,n):
    """turn a number i into a length n list of true, false values"""
    b = str(bin(i))[:2].zfill(n) ##convert i to binary, remove 0b, pad the front to give appropriate string length
    c = []
    for j in range(n):
        if b[j] == '0': ##needs to be in '' since converted to string
           c.append(False)
        if b[j] == '1':
           c.append(True)
    return c      

def all_lists(n):
    """return all possible length n lists of true, false values"""
    lists = []
    for i in range(2**n):
        lists.append(convert_string(i,n))
    return lists

def pack(a):
    """pack a list into a Boolean matrix. Note single values are held in lists for compatibility with multiplication function"""
    mat = []
    s = floor(sqrt(len(a))) ## floor to remove float from sqrt(len(a)), indexing will fail if len(a) not square
    for i in range(s):
        mat.append([]) ## initialise rows
        for j in range(s):
            mat[i].append([a[i*s+j]])
    return mat

def all_matrices(k):
    """compile a list of all k x k single-bit Boolean matrices"""
    matrices = []
    b = all_lists(k**2)
    for i in range(len(b)):
        matrices.append(pack(a[i]))
    return matrices
    
def compose_permutations(g, h):
    return lamba a : h(g(a))
    
def semidirect_product(tup1, tup2):
    perm_mat = tup2[1](tup1[0])
    first_elem = prod_bool_mat(perm_mat, tup2[0])
    second_elem = compose_permutations(tup1[1],tup2[1])
    return (first_elem, second_elem)
    
def exponentiation(tup,k):#this is really really slow and I don't know why
    k_binary = bin(k)
    value = tup
    for digit in range(3,len(k_binary)):
        value = semidirect_product(value, value)[:]
        if (k_binary[digit] == '1'):
           value = semidirect_product(value, tup)[:]
    return value 
    
def generate_A(M,h,x): #M, h need to be predefined
    A = exponentiation((M,h),x)
    return A[0]
    
def pull(k,a):
    b = []
    for i in range(len(a)):
        b.append([])
        for j in range(len(a)):
            b[i].append([a[i][j][k]])
    return b
    
def count_solutions(a, b, mats) ##takes a list of matrices to count solutions from as an input
    count = 0
    for i in range(len(mats)):
        if a == prod_bool_mat(mats[i], b):
           count = count + 1
        else:
           count = count + 0 
    return count
    
def multiply_list(a)
    result = 1 
    for x in a:
        result = result * x
    return result
    
def count_telescope_solutions(M,h): ##need to decide on what upper, lower bounds to use 
    x = randint(LOWER_BOUND, UPPER_BOUND)
    mats = all_matrices(len(M))
    a = generate_A(M,h,x)
    b = prod_bool_mat(h(a), M)
    sols_list = []
    for i in range(len(M[0][0])):
        single_sols = count_solutions(pull(i, b), pull(i, a), mats)
        sols_list.append(single_sols)
    return (sols_list, multiply_list(sols_list), math.log(multiply_list(sols_list), 2))
    
    
    
    
    
    
